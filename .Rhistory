devtools
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
M <- matrix(c(0,-2.5,0,3,0,1,0,7.5,0),byrow=T,3,3)
M
eigen(M)
M %*% M
M %*% M %*% M
M*2
eigen(M*2)
M
det(M)
M[c(3,2,1),]
M[c(3,2,1),] -> M2
eigen(M2)
M[c(3,2,1),c(3,2,1)] -> M2
eigen(M2)
M
D
D <- matrix(c(0,1,0,0,0,2,0,0,0),byrow=T,3,3)
D
eigen(D)
M
5+7
5+7
3+3
5+7
11+2
11+2
library(wedge)
rform()
rform()
a <- rform()
a
a %^% a
a %^% a
a
a <- rform()
a
a %^% a
a <- rform()
a %^% a
a <- rform()
a %^% a
rform
rform(k=4)
a <- rform(k=4)
a
a
a %^% a
a <- rform(k=4,=19)
a <- rform(k=4,n=19)
a
a %^% a
a <- rform(k=2)
a
a %^% a
rform
a <- rform(terms=2,k=2)
a
a %^% a
a %^% 55
a %^% 0
a %^% a
3 %^% a
3*a
a*3
a/44
a/
0
a
a
inner
q()
n
R.Versio()
R.Version()
install.packages("stats")
R.Version()
R.Version
R.Version()
R.Version()
R.Version()
system("ls")
system("which R")
q()
R.Version()
sdf
a+6
a
knitr::opts_chunk$set(echo = TRUE)
a <- read.table("footballresults.txt")
colnames(a) <- c("home","away")
head(a)
nrow(a)
a
table(a)
table()
c(a=1,b=3)
c(a=1,0=3)
c(a=1,'0'=3)
c('0'=1,'0'=3)
1-sum(dpois(0:3,1.5))
ppois(4,1.5,FALSE)
ppois(3,1.5,FALSE)
a
table(a)
fisher.test(table(a))
sum(dpois(0:7),1.7)
sum(dpois(0:7,1.5))
sum(dpois(0:7,1.5))^90
1-sum(dpois(0:7,1.5))^90
1-sum(ppois(7,1.5))^90
library(wedge)
?`%*%`
install.packages("dplyr")
install.packages("plyr")
q()
library(wedge)
?Alt
spray(expand.grid(1:4,1:4))
spray(expand.grid(1:4,1:4),rnorm(16))
spray(expand.grid(1:4,1:4),rnorm(16)) -> P
P
Alt(P)
spray(expand.grid(1:3,1:3,rnorm(9)) -> P
)
spray(expand.grid(1:3,1:3,rnorm(9))) -> P
P
spray(expand.grid(1:3,1:3,rnorm(9)))
ktensor(expand.grid(1:3,1:3,rnorm(9)))
as.ktensor(expand.grid(1:3,1:3,rnorm(9)))
?ktensor
ktensor(spray(expand.grid(1:3,1:3,rnorm(9))))
ktensor(spray(expand.grid(1:3,1:3),rnorm(9)))
ktensor(spray(expand.grid(1:3,1:3),rnorm(9)))
Alt(ktensor(spray(expand.grid(1:3,1:3),rnorm(9))))
P <- ktensor(spray(expand.grid(1:3,1:3),rnorm(9)))
P
Alt(P)
ktensor(spray(expand.grid(1:3,1:3),rnorm(9)))
as.ktensor(spray(expand.grid(1:3,1:3),rnorm(9)))
as.ktensor(expand.grid(1:3,1:3),rnorm(9))
as.ktensor(expand.grid(1:3,1:3),rnorm(9)) -> p
p
as.kform(p)
install.packages("bit")
library(magic)
magicplot(magic(10))
magicplot(magic(11))
magicplot(magic(12))
magicplot(magic(8))
library(lorentz)
r3vel(7)
r3vel(7) -> x
speed(x)
x+X
x+x
speed(x+x)
plot(speed(x),speed(x+x))
r3vel(7)44 -> x
r3vel(1e4) -> x
plot(speed(x),speed(x+x))
plot(speed(x),speed(x+x),asp=1)
gam
gam()
?gam
?perm_matrix
library(permutations)
?perm_matrix
vignette("wedge")
install.packages("microbenchmark")
install.packages("elliptic")
library(wedge)
wedge
?wedge
k1 <- as.kform(cbind(1:5,2:6),1:5)
k2 <- as.kform(cbind(5:7,6:8,7:9),1:3)
k3 <- kform_general(1:6,2)
a1 <- wedge2(k1,wedge2(k2,k3))
a2 <- wedge2(wedge2(k1,k2),k3)
a1
a2
a1+a2
rform(4,5,6)
rform(4,5,67)
rform(4,50,67)
rform(4,50,67)
rform(1000,50,67)
rform(1000,50,67) ->a
rform(1000,50,67) ->b
a+B
a+b
a
rform(3,10,67) ->b
rform(3,10,67)
rform(3,10,67)
rform(3,10,67)
rform(3,10,67)
rform(3,10,67)
rform(3,10,67)
rform(3,10,67)
rform(3,10,67)
rform(3,10,67)
rform(3,10,67)
rform(3,10,67),1:3)
rform(3,10,67,1:3)
rform(3,10,67,1:3)
rform(3,10,67,1:3)
library(deSolve)
getwd()
setwd("./rstudio/string/")
source("mercury.R")
knitr::opts_chunk$set(echo = TRUE)
source("mercury.R")
source("usefulfuncs.R")
source("usefulgeodesicfuncs.R")
jj <- trajectory(30, 1/2, 3) # m=1/2 -> Schwarzschild radius = 1
plot(jj$x,jj$y, asp=1, type='l', axes=FALSE, xlab='', ylab='',main='Geodesics in the Schwarzschild geometry')
polargrid(r=10*(1:3))
event_horizon()
jj <- trajectory(30, 1/2, 3, GR=FALSE) # GR=FALSE means use Newtonian approximation
plot(jj$x,jj$y, asp=1, type='l', axes=FALSE, xlab='', ylab='',main='Newtonian approximation')
polargrid(r=10*(1:3))
event_horizon()
G <-  6.674e-11     # big G in SI
M  <- 1.9885e30     # mass of Sun (kg)
M_merc <- 3.3011e23 # mass of Mercury (kg)
sol <- 299792458    # speed of light (m/s)
merc_perihelion <- 46001200e3
merc_aphelion   <- 69816900e3
mu <- G*(M + M_merc)
d <- G*M/sol^2  # mass of sun in meters
r_s <- 2*d      # Schwarzschild radius of Sun (=2M)
a <- (merc_perihelion + merc_aphelion)/2
cee <- a-merc_perihelion
b <- sqrt(a^2-cee^2)
ecc <- sqrt(1-(b/a)^2)  # should match ecc_wiki above
ell <- (a^2-cee^2)/a  # semi-latus rectum
vmin <- sqrt(mu/ell)*(1-ecc)
vmax <- sqrt(mu/ell)*(1+ecc)
specific_angular_momentum_SI <- merc_perihelion * vmax
h <- specific_angular_momentum_SI/sol #geometrized units
out <- trajectory(merc_perihelion, m=d, h=h, tau=seq(from=0,to=35e15,len=5e5))
out <- trajectory(merc_perihelion, m=d, h=h, tau=seq(from=0,to=35e15,len=5e5))
knitr::opts_chunk$set(echo = TRUE)
source("mercury.R")
source("usefulfuncs.R")
source("usefulgeodesicfuncs.R")
jj <- trajectory(30, 1/2, 3) # m=1/2 -> Schwarzschild radius = 1
plot(jj$x,jj$y, asp=1, type='l', axes=FALSE, xlab='', ylab='',main='Geodesics in the Schwarzschild geometry')
polargrid(r=10*(1:3))
event_horizon()
jj <- trajectory(30, 1/2, 3, GR=FALSE) # GR=FALSE means use Newtonian approximation
plot(jj$x,jj$y, asp=1, type='l', axes=FALSE, xlab='', ylab='',main='Newtonian approximation')
polargrid(r=10*(1:3))
event_horizon()
G <-  6.674e-11     # big G in SI
M  <- 1.9885e30     # mass of Sun (kg)
M_merc <- 3.3011e23 # mass of Mercury (kg)
sol <- 299792458    # speed of light (m/s)
merc_perihelion <- 46001200e3
merc_aphelion   <- 69816900e3
mu <- G*(M + M_merc)
d <- G*M/sol^2  # mass of sun in meters
r_s <- 2*d      # Schwarzschild radius of Sun (=2M)
a <- (merc_perihelion + merc_aphelion)/2
cee <- a-merc_perihelion
b <- sqrt(a^2-cee^2)
ecc <- sqrt(1-(b/a)^2)  # should match ecc_wiki above
ell <- (a^2-cee^2)/a  # semi-latus rectum
vmin <- sqrt(mu/ell)*(1-ecc)
vmax <- sqrt(mu/ell)*(1+ecc)
specific_angular_momentum_SI <- merc_perihelion * vmax
h <- specific_angular_momentum_SI/sol #geometrized units
out <- trajectory(merc_perihelion, m=d, h=h, tau=seq(from=0,to=35e15,len=5e5))
plot(out$x,out$y,type='l',asp=1,axes=FALSE,xlab='',ylab='')
event_horizon()
max(out$phi/(2*pi))
out <- trajectory(merc_perihelion, m=d, h=h, tau=seq(from=0,to=35e16,len=1e7))
conversion
conversion <-
c(
seconds_per_minute = 60,
minutes_per_hour   = 60,
hours_per_day      = 24,
days_per_year      = 365.25,
years_per_century  = 100,
degrees_per_radian = 180/pi,
minutes_per_degree = 60,
seconds_per_minute = 60
)
minutes_per_degree = 60,
conversion
prod(conversion)
prod(conversion) *
4
source("mercury.R")
source("mercury.R")
arcseconds_per_century
arcseconds_per_century*60
source("mercury.R")
arcseconds_per_century

Following is a cut-and-paste from a mathematica session.  I've edited
things here and there and annotated for clarity.  File
'tight_string.mma' contains just the mathematica commands.




rksh@AUTSCMS2013 ~ $ wolfram
Wolfram Language (Raspberry Pi Pilot Release)
Copyright 1988-2014 Wolfram Research
Information & help: wolfram.com/raspi

In[1]:= Needs["VariationalMethods`"]                                                                    



## First, do a straight line in polar coordinates in flat space:
In[2]:= EulerEquations[Sqrt[y[x]^2 + y'[x]^2],y[x],x] 

                  2          2
        y[x] (y[x]  + 2 y'[x]  - y[x] y''[x])
Out[2]= ------------------------------------- == 0
                      2        2 3/2
                 (y[x]  + y'[x] )

In[3]:= DSolve[%2,y[x],x]                                                                               

Out[3]= {{y[x] -> 0}, {y[x] -> C[2] Sec[x + C[1]]}}

## mathematica solves this to give r = a sec(theta), as expected.
## Note that the two constants of integration correspond to
## distance-of-nearest-approach-to-the-origin (C[2]), and
## angle-of-line-to-vertical (C[1]).


The differential equation is, explicitly:

                      2          2
                    y[x]  + 2 y'[x]
Out[3]= {{y''[x] -> ----------------}}
                          y[x]



Or r'' = r + 2(r')^2/r

(this is quite challenging to solve ab initio by hand)



## Now try the Euler-Lagrange equation for the proper length of a path r=r(theta) but in Schwarzschild space.
## Here y[x] -> r(theta).


In[4]:= EulerEquations[Sqrt[y[x]^2 + y'[x]^2/(1-1/y[x])],y[x],x]


Following is _sage_, performing the radial string integration and in
particular verifying that the 'M' in front of the log term is in fact
'M' and not 2M' as Taylor and Wheeler claim:

sage: var('r M r1 r2') 
(r, M, r1, r2)

sage: assume(r>0,r1>0,r2>0, r1>2*M, r2>2*M, r2-r1>0, M>0) 
sage: integrate(1/sqrt(1-2*M/r),r) 
M*log(sqrt(-2*M/r + 1) + 1) - M*log(sqrt(-2*M/r + 1) - 1) + r*sqrt(-2*M/r + 1)

It is possible to do the definite integration but it's a mess:

sage: integrate(1/sqrt(1-2*M/r),r,r1,r2).full_simplify()
-M*log(sqrt(-(2*M - r1)/r1) + 1) + M*log(sqrt(-(2*M - r2)/r2) + 1) + M*log(abs(sqrt(-(2*M - r1)/r1) - 1)) - M*log(abs(sqrt(-(2*M - r2)/r2) - 1)) - r1*sqrt(-(2*M - r1)/r1) + r2*sqrt(-(2*M - r2)/r2) 
